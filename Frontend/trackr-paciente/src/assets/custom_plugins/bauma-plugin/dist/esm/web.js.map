{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,cAAe,SAAQ,SAAS;IAC3C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,SAAS,CAAC,OAA0B;QACxC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAClC,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAMD,MAAM,OAAO,cAAe,SAAQ,SAAS;IAC3C;;OAEG;IACH,KAAK,CAAC,WAAW;QACf,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACzC,oBAAoB;QACpB,MAAM,OAAO,GAAG;YACd,EAAE,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,gBAAgB,EAAE;YACzD,EAAE,KAAK,EAAE,gBAAgB,EAAE,UAAU,EAAE,gBAAgB,EAAE;SAC1D,CAAC;QACF,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,WAAW,CAAC,OAA6B;QAC7C,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC1E,uDAAuD;QACvD,MAAM,QAAQ,GAAG;YACf;gBACE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG;gBAC9C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;gBAC9C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;aAC/C;YACD;gBACE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG;gBAC9C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;gBAC9C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;aAC/C;SACF,CAAC;QACF,OAAO,EAAE,QAAQ,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI;QACR,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,OAAO,EAAE,KAAK,EAAE,4DAA4D,EAAE,CAAC;IACjF,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { BaumaPluginPlugin } from './definitions';\n\nexport class BaumaPluginWeb extends WebPlugin implements BaumaPluginPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async readBauma(options: { value: string }): Promise<{ value: string }> {\n    console.log('READBAUMA', options);\n    return options;\n  }\n}\n\n\nimport type { OmronCustomPlugin } from './definitions';\n\n\nexport class OmronCustomWeb extends WebPlugin implements OmronCustomPlugin {\n  /**\n   * Simulates scanning for devices by returning a list of dummy devices.\n   */\n  async scanDevices(): Promise<{ devices: Array<{ model: string; identifier: string }> }> {\n    console.log('scanDevices called on web');\n    // Return dummy data\n    const devices = [\n      { model: 'Dummy Device 1', identifier: 'dummy-device-1' },\n      { model: 'Dummy Device 2', identifier: 'dummy-device-2' },\n    ];\n    return { devices };\n  }\n\n  /**\n   * Simulates retrieving readings from a device by returning dummy readings.\n   * @param options Contains the deviceId of the device to get readings from.\n   */\n  async getReadings(options: { deviceId: string }): Promise<{ readings: Array<{ systolic?: number; diastolic?: number; pulseRate?: number }> }> {\n    console.log('getReadings called on web with deviceId:', options.deviceId);\n    // Return dummy readings based on the provided deviceId\n    const readings = [\n      {\n        systolic: Math.floor(Math.random() * 20) + 110,   // Random systolic between 110 and 130\n        diastolic: Math.floor(Math.random() * 20) + 70,   // Random diastolic between 70 and 90\n        pulseRate: Math.floor(Math.random() * 40) + 60,   // Random pulse rate between 60 and 100\n      },\n      {\n        systolic: Math.floor(Math.random() * 20) + 110,\n        diastolic: Math.floor(Math.random() * 20) + 70,\n        pulseRate: Math.floor(Math.random() * 40) + 60,\n      },\n    ];\n    return { readings };\n  }\n\n  /**\n   * Example echo method that returns a fixed string.\n   */\n  async echo(): Promise<{ value: string }> {\n    console.log('echo called on web');\n    return { value: 'This is a dummy echo response from the web implementation.' };\n  }\n}"]}